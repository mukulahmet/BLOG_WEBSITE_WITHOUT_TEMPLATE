// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(BlogDBContext))]
    partial class BlogDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "04a1dc97-11f9-4dba-8e32-da287c2f1c3c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6e472a0b-e9dc-46d5-ba6d-8c9c877da289",
                            Name = "Uye",
                            NormalizedName = "UYE"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "549eb6ba-d244-4c85-bf0a-32c829e40ffa",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(3586),
                            Email = "cevdet@deneme.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CEVDET@DENEME.COM",
                            NormalizedUserName = "CEVDET@DENEME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPN/o/aWRDsXoCPitTxw4HGIbke4iCe7smxH3WliU64oiQRGT+dSDUH2rk6tLkgGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92c64ea1-1576-4257-936b-c40feffd2eea",
                            TwoFactorEnabled = false,
                            UserName = "cevdet@deneme.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d1c30e8-6b91-40e3-9e66-310347a96f66",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(3607),
                            Email = "selami@deneme.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SELAMI@DENEME.COM",
                            NormalizedUserName = "SELAMI@DENEME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGVnsr7eynhRacQfj7pjQhjPDsfwJZL6uOdTnfY/bSe5p0hc90EWilkoWwTQAeahQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f1330fa-9f02-49c2-91be-1879b64fcefd",
                            TwoFactorEnabled = false,
                            UserName = "selami@deneme.com"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            Content = "Sinema, toplumsal bağları güçlendirir, kültürel ve duygusal bağlar kurar. İnsanların hayal gücünü besler, farklı bakış açıları sunar ve toplumsal konulara dikkat çeker. Eğlencenin yanı sıra, sinema sanatı sayesinde insanlar, farklı dünyalar ve yaşamları keşfederek empati geliştirme fırsatı bulur.",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 711, DateTimeKind.Local).AddTicks(9973),
                            Title = "Sinemanın Önemi",
                            UserId = 1
                        },
                        new
                        {
                            ArticleId = 2,
                            Content = "Günümüzde bilim, teknolojinin ve yaşam kalitesinin temel taşıdır. Sağlık, iletişim, enerji ve çevre gibi alanlarda devrim niteliğinde ilerlemeler sağlar. Bilimsel araştırmalar, hastalıkların tedavisinde yenilikler sunar, iklim değişikliğiyle mücadelede kritik bilgiler sağlar ve günlük yaşamımızı daha verimli ve sürdürülebilir kılar.",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 712, DateTimeKind.Local).AddTicks(76),
                            Title = "Bilimin Günümüzdeki Yeri",
                            UserId = 1
                        },
                        new
                        {
                            ArticleId = 3,
                            Content = "İstanbul, tarihi ve kültürel zenginlikleriyle büyüleyici bir şehirdir. Ayasofya, Topkapı Sarayı ve Sultanahmet Camii gibi tarihi yapılar, Boğaz manzarası ve Kapalıçarşı’nın renkli atmosferi görülmeye değerdir. Galata Kulesi'nden panoramik şehir manzarası izlenebilir, İstiklal Caddesi boyunca keyifli bir yürüyüş yapılabilir.",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 712, DateTimeKind.Local).AddTicks(77),
                            Title = "İsatnbulda Gezilecek Yerler",
                            UserId = 1
                        },
                        new
                        {
                            ArticleId = 4,
                            Content = "Psikolojik hastalıklar, bireyin zihinsel sağlığını etkileyen bozukluklardır. Depresyon, anksiyete, bipolar bozukluk ve şizofreni gibi hastalıklar, duygusal ve davranışsal değişikliklere yol açar. Erken tanı ve tedavi, yaşam kalitesini artırmada kritiktir. Terapi, ilaç tedavisi ve destek grupları, iyileşme sürecinde önemli rol oynar.",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 712, DateTimeKind.Local).AddTicks(78),
                            Title = "Psikolojik Hastalıklar",
                            UserId = 1
                        },
                        new
                        {
                            ArticleId = 5,
                            Content = "Eğitim sorunları, kalitesiz öğretim, yetersiz altyapı ve eşitsiz erişim gibi konuları içerir. Özellikle kırsal bölgelerde, maddi imkansızlıklar ve öğretmen eksikliği yaygındır. Eğitimde fırsat eşitsizliği, sosyal ve ekonomik kalkınmayı engeller. Etkili çözümler için devlet desteği, modern teknolojiler ve öğretmenlerin sürekli eğitimi önemlidir.",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 712, DateTimeKind.Local).AddTicks(79),
                            Title = "Sinemanın Önemi",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCategoryId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ArticleCategoryId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            ArticleCategoryId = 1,
                            ArticleId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleCategoryId = 2,
                            ArticleId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ArticleCategoryId = 3,
                            ArticleId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ArticleCategoryId = 4,
                            ArticleId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            ArticleCategoryId = 5,
                            ArticleId = 5,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Bilim",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(1116)
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Gezi",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(1131)
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Psikiloji",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(1193)
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Eğitim",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(1194)
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Sinema",
                            CreatedDate = new DateTime(2024, 5, 27, 0, 48, 37, 713, DateTimeKind.Local).AddTicks(1195)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Article", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.ArticleCategory", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategories");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Category", b =>
                {
                    b.Navigation("ArticleCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
